" Alexey Chernyshev's great vim config 2024-12
" za - open fold, zR -open all folds

" Short help {{{
" - TIPS --------------------------------------------------
"   - to retab all tabs to spaces use :%retab
"   - to go to file under cursor use <gf> and return <C-o> or <C-6>
"
" - Folding -----------------------------------------------
"   Vim folding :help usr_28
"   - <zo> or <l> open  fold
"   - <zO> open all folds at the cursor
"   - <zc> close fold
"   - <za> togle fold
"   - <zm> increases the foldlevel by one
"   - <zM> close all
"   - <zr> decreases the foldlevel by one
"   - <zR> open  all
"
"   - <zj> move to the next fold
"   - <zk> move to the prev fold
"   - <[z> move to start of open fold
"   - <]z> move to end of open fold
"
"   - select text with <shift-v> and <zf> to create fold from selected lines
"   - <zf#j>      creates a fold form the cursor down # lines
"   - <zf/string> creates a fold from the cursor to string
"   - <zd> deletes the current fold
"   - <zE> deletes all folds
"   
" - Vim Splits  :help splits -------------------------------
"   - Create splits
"     - for current buffer vertical :vsp  horizontal :sp
"     - for file :vsp ~/.filename
"     - specify split hight  :10sp roles/playbook/main.yml
"     - close current :q  
"   - Resizing split
"     Vim’s defaults are useful for changing split shapes:
"     - <C-w _>  Max out the height of the current split
"     - <C-w |>  Max out the width  of the current split
"     - <C-w =>  Normalize all split sizes
"   - More split manipulation:
"     - <C+W R>  Swap top/bottom or left/right split
"     - <C+W T>  Break out current window into a new tabview
"     - <C+W o>  Close every window in the current tabview, but the current one
"     
" - Vim CASE ----------------------------------------------
"   - <~>     toggle case at the cursor
"   - <g~iw>  toggle case current word
"   - <g~~> or <V~> toggle case current line
"   - <gUiw>  uppercase current word
"   - <gUU> or <VU> uppercase current line
"   - <guu> or <Vu> lowercase
"   - select text with <V> or <v> and <~>
"
" - Vim marks ---------------------------------------------
"   lowercase - current buffer, uppercase - global
"   - ma - set mark a at current cursor location
"   - 'a - jump to line of mark a
"   - `a - jump to position of mark a
"   - d`a - delete from cersor to position of marked a
"   - c'a - change text from cerrent line to line maked a
"   - y`a - yank text from cursor to pos of mark a
"   - :marks - list all current marks
"   - :marks aB - list marks a, B
"
"   special mark
"   - `0 - jump to position in last file edited
"   - `1 - like `0 but to the prev file, also `2 `3 etc
"
"   - [' ]' - jump to next or previous lowercase marked line
"   - [` ]` - jump to next or previous mark
"     and may use count for example 3[' jumps to third mark after cursor
"
"   - :delmarks or :delm
"   - :delmarks a - delete mark a
"   - :delmarks a-d - delete abcd marks
"   - :delmarks Aa - delete a and A marks
"   - :delmarks! - delete all lowercase marks for current buffer
"
" - Vim autocomplete --------------------------------------
"   - in insert mode press <C-n>, Esc - exit, Enter -select
"   
" - View Git commits --------------------------------------
"   Git Navigator for Vim | junegunn/gv.vi ----------------
"   - :GV  for all
"   - :GV! for current file
"   - :GV? for list of commits for current file in command panel

" - Tab guides | nathanaelkane/vim-indent-guides ----------
"   - <leader>ig  toggle guides
"
" - Ansible | pearofducks/ansible-vim ---------------------
"   - <leader>gr  to open role task main.yml under cursor
"
" - Commentary toggle | tpope/vim-commentary --------------
"   - <gcc>  comment uncomment the current line
"   - <gc>   comment uncomment the selection in Visual mode
"   - <gcap> comment uncomment the paragraph (:help text-objects)
"
" - Vim surround, replace quotes | tpope/vim-surround -----
"   https://github.com/tpope/vim-surround
"   - <cs"'>  replace quotes " to '
"   - <ds">   remove quotes
"   - <ysiw]> current word to []
"   - <cs]{>  replace [] to {}
"   - <ussb>  or <yss)> () around line
"   
" - NERDTree ----------------------------------------------
"   - <leader>n :NERDTreeFocus
"   - <C-n>     :NERDTree
"   - <C-t>     :NERDTreeToggle
"   - <C-f>     :NERDTreeFind
"
" - My key bindings ---------------------------------------
"   I use Space as <leader> key
"   - common
"     - <leader>l to toggle set list
"     - <leader>r to toggle set relativenumber
"     - <leader>3 or 
"     - <leader>8    to toggle hlsearch
"   - Buffers manipulation
"     - <leader>bN     new buffer   
"     - <leader>bn    next buffer  
"     - <leader>bb    prev buffer  
"     - <leader>bq   close buffer 
"     - <leader>bl    list buffers 
"   - Split manipulation
"     - <C-J>   To bottom pane, default <C-W><C-J>
"     - <C-K>   To upper  pane, default <C-W><C-K>
"     - <C-H>   To left   pane, default <C-W><C-H>
"     - <C-L>   To right  pane, default <C-W><C-L>
"
" ---------------------------------------------------------
" install vim-plug
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"   After add new plugin to list between lines 'call plug#begin()' and 'call plug#end()'
"   run :w :source % then run :PlugInstall
" Other plugin commands :PlugUpdate :PlugClean

" }}}

syntax on
set nocompatible
set number
" Set Space key as Leader key
let mapleader = " "
set clipboard=unnamedplus
filetype plugin indent on
set tabstop=4
set shiftwidth=4
set softtabstop=4
set expandtab
set listchars=eol:¬,tab:>·,trail:~,extends:>,precedes:<,space:·
set splitbelow
set splitright
" set laststatus=2
runtime macros/matchit.vim

" Key bindings {{{
" toggle set list
nnoremap <leader>l :set list!<CR>
" toggle set relativenumer
nnoremap <leader>r :set relativenumber!<CR>
" toggle search highlighting
nnoremap <leader>3 :set hlsearch!<CR>
nnoremap <leader>8 :set hlsearch!<CR>
" buffers manipulations
nnoremap <leader>bN   :enew<CR>
nnoremap <leader>bn   :bnext!<CR>
nnoremap <leader>bb   :bprevious!<CR>
nnoremap <leader>bq   :bp <BAR> bd #<CR>
nnoremap <leader>bl   :ls<CR>

nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

"}}}

" Activate plugins {{{

call plug#begin()

    " List my plugins
    " Plug 'joshdick/onedark.vim'            " Best thene for my
    " Plug 'ayu-theme/ayu-vim'
    Plug 'sonph/onehalf', { 'rtp': 'vim' }

    Plug 'pearofducks/ansible-vim'         " For ansible highlight
    " Plug 'sheerun/vim-polyglot'
    Plug 'nathanaelkane/vim-indent-guides' " toggle guides <leader>ig
    Plug 'vim-airline/vim-airline'         " status bar svistoperdelki
    Plug 'vim-airline/vim-airline-themes'  " themes for airline
    Plug 'kshenoy/vim-signature'           " left bar marks
    Plug 'airblade/vim-gitgutter'          " left bar git marks not simple
    " Plug 'mhinz/vim-signify'               " left bar git marks simple
    Plug 'tpope/vim-surround'              " Tim Pope quotas changer
    Plug 'tpope/vim-fugitive'              " Tim Pope Git plugin
    Plug 'tpope/vim-commentary'            " Tim Pope commentary plugin
    Plug 'junegunn/gv.vim'                 " Git Navigator for VIM :GV :GV! :GV?
    Plug 'preservim/nerdtree'              " File manager
    Plug 'xuyuanp/nerdtree-git-plugin'     " show git status in nt
    Plug 'PhilRunninger/nerdtree-buffer-ops'  " 
" After add new plugin to list abobe run :w :source % then run :PlugInstall
" Other plugin commands :PlugUpdate :PlugClean

call plug#end()

" }}}

" Settings for pearofducks/ansible-vim {{{
" https://github.com/pearofducks/ansible-vim?tab=readme-ov-file
let g:ansible_unindent_after_newline = 1
let g:ansible_attribute_highlight = 'od'
let g:ansible_template_syntaxes = { '*.conf.j2': 'conf' }
"
" let g:ansible_yamlKeyName = 'yamlKey'
" let g:ansible_name_highlight = 'b'
let g:ansible_normal_keywords_highlight = 'Constant'
let g:ansible_extra_keywords_highlight = 1
let g:ansible_extra_keywords_highlight_group = 'Statement'
"
" }}}

" Settings for indent guides {{{

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_guide_size = 1
let g:indent_guides_auto_colors = 0

" }}}

" Color schema settings {{{
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
set t_Co=256
set cursorline
colorscheme onehalfdark
let g:airline_theme='onehalfdark'

" colorscheme onedark
" let g:airline_theme='onedark'
" let ayucolor="dark"
" let ayucolor="mirage"
" colorscheme ayu
" let g:airline_theme='ayu'

hi IndentGuidesOdd  ctermbg=234
hi IndentGuidesEven ctermbg=235
" set background=dark
" colors for vim-indent-guides

" }}}

" airline settings {{{

let g:airline#extensions#tabline#enabled = 1

"}}}

" vim-signify settings {{{
" set updatetime=100
"}}}

" airblade/vim-gitgutter settings {{{
set updatetime=100
" let g:gitgutter_enabled = 0             " turn off vim-gitgutter
let g:gitgutter_signs = 0               " turn off signs
" let g:gitgutter_highlight_lines = 1     " turn on line highlighting
" let g:gitgutter_highlight_linenrs = 1   " turn on line number highlighting
map <F2> :GitGutterLineHighlightsToggle<CR>
map <F3> :GitGutterSignsToggle<CR>
map <F4> :GitGutterDiffOrig<CR>
"  }}}
"
" Nerdtree settings {{{
"
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | call feedkeys(":quit\<CR>:\<BS>") | endif
" let g:NERDTreeFileLines = 1

" }}}

" go to role snippet {{{
"   Use ledaer gr to go to role under cursor like leader gf for file
"   Use Ctrl-6 to toggle between two files, or Ctrl-o to back previous edit
"   place
"
" let g:ansible_goto_role_paths = './roles,../_common/roles'

function! FindAnsibleRoleUnderCursor()
  if exists("g:ansible_goto_role_paths")
    let l:role_paths = g:ansible_goto_role_paths
  else
    let l:role_paths = "./roles"
  endif
  let l:tasks_main = expand("<cfile>") . "/tasks/main.yml"
  let l:found_role_path = findfile(l:tasks_main, l:role_paths)
  if l:found_role_path == ""
    echo l:tasks_main . " not found"
  else
    execute "edit " . fnameescape(l:found_role_path)
  endif
endfunction
" au BufRead,BufNewFile */ansible/*.yml
nnoremap <leader>gr :call FindAnsibleRoleUnderCursor()<CR>
" au BufRead,BufNewFile */ansible/*.yml
vnoremap <leader>gr :call FindAnsibleRoleUnderCursor()<CR>
" }}}

" Filetypes {{{
"
au BufRead,BufNewFile inv-* set syntax=ansible_hosts
"
" }}}
"
" Vimscript {{{

" Enable folding for vimrc
augroup filetype_vim
  autocmd!
  autocmd FileType vim setlocal foldmethod=marker
augroup END

" }}}

